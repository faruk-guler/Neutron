#!/bin/bash

# Color definitions
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Banner
echo -e "${CYAN}###########################################################${NC}
${GREEN}# Neutron v5 - Optimized${NC}
# Lightweight and Powerful automation tool for Linux/Unix
# Author: faruk-guler
# Page: www.farukguler.com github.com/faruk-guler
${CYAN}###########################################################${NC}"

# History file
HISTORY_FILE="$HOME/.neutron_history"
touch "$HISTORY_FILE"

# Readline settings (for interactive shell)
if [[ $- == *i* ]]; then
    bind '"\e[A": history-search-backward'
    bind '"\e[B": history-search-forward'
    bind 'set show-all-if-ambiguous on'
    bind 'set completion-ignore-case on'
    bind 'TAB: menu-complete'
fi

# Load configuration files
source config.ner || { echo -e "${RED}Error: config.ner not found! Please create it and enter your SSH credentials.${NC}"; exit 1; }
source sources.ner || { echo -e "${RED}Error: sources.ner not found! Please create it and enter your server list.${NC}"; exit 1; }

# Validate configuration - ONE TIME CHECK
validate_config() {
    [ -z "${HOSTS+x}" ] && { echo -e "${RED}Error: HOSTS not defined in sources.ner${NC}"; exit 1; }
    [ -z "${USER+x}" ] && { echo -e "${RED}Error: USER not defined in config.ner${NC}"; exit 1; }
    [ -z "${PRIVATE_KEY_FILE+x}" ] && { echo -e "${RED}Error: PRIVATE_KEY_FILE not defined in config.ner${NC}"; exit 1; }
    [ ! -f "$PRIVATE_KEY_FILE" ] && { echo -e "${RED}Error: Private key file not found: $PRIVATE_KEY_FILE${NC}"; exit 1; }
}

# Validate host format
validate_hosts() {
    local invalid_hosts=()
    for host_port in "${HOSTS[@]}"; do
        if ! [[ "$host_port" =~ ^[^:]+:[0-9]+$ ]]; then
            invalid_hosts+=("$host_port")
        fi
    done
    
    if [ ${#invalid_hosts[@]} -gt 0 ]; then
        echo -e "${RED}Error: Invalid host formats: ${invalid_hosts[*]}${NC}"
        exit 1
    fi
}

# Build SSH command - REUSABLE FUNCTION
build_ssh_command() {
    local host="$1"
    local port="$2"
    local additional_opts="${3:-}"
    
    echo "ssh $additional_opts -o ConnectTimeout=3 -o StrictHostKeyChecking=no -p \"$port\" -i \"$PRIVATE_KEY_FILE\" \"$USER@$host\""
}

# Execute validation
validate_config
validate_hosts

# Initialize session data
declare -A current_dir host_ports

for host_port in "${HOSTS[@]}"; do
    IFS=: read host port <<< "$host_port"
    current_dir["$host"]="/root"
    host_ports["$host"]="$host:$port"
done

# Clean up temporary files on exit
trap 'rm -f "${outputs[@]}" 2>/dev/null' EXIT

# Load command history
history -r "$HISTORY_FILE"

# Main loop
while read -e -p "$(echo -e "${GREEN}shell # ${NC}")" -r cmd; do
    history -s "$cmd"
    history -w "$HISTORY_FILE"

    [ -z "$cmd" ] && continue
    [ "$cmd" = "exit" ] && break

    # Handle "cd" command - OPTIMIZED
    if [[ "$cmd" =~ ^cd ]]; then
        dir="${cmd#cd }"
        [ -z "$dir" ] && dir="~"  # Handle bare "cd" command
        
        for host in "${!current_dir[@]}"; do
            IFS=: read _ port <<< "${host_ports[$host]}"
            ssh_cmd=$(build_ssh_command "$host" "$port")
            
            if eval "$ssh_cmd \"test -d \\\"$dir\\\"\"" 2>/dev/null; then
                current_dir["$host"]="$dir"
            else
                echo -e "${YELLOW}Warning: Directory '$dir' does not exist on $host${NC}"
            fi
        done
        continue
    fi

    # Handle all other commands - OPTIMIZED
    declare -A jobs outputs

    # Execute the command concurrently on each host
    for host in "${!current_dir[@]}"; do
        IFS=: read _ port <<< "${host_ports[$host]}"
        temp_file=$(mktemp)
        outputs["$host"]="$temp_file"

        ssh_cmd=$(build_ssh_command "$host" "$port" "-n")
        remote_cmd="cd \"${current_dir[$host]}\" && hostname && $cmd"
        
        eval "$ssh_cmd \"$remote_cmd\" > \"$temp_file\" 2>&1 &"
        jobs["$host"]="$!"
    done

    # Wait for all jobs to complete and display outputs - OPTIMIZED
    first=true
    for host in "${!jobs[@]}"; do
        wait "${jobs[$host]}"

        if ! $first; then
            echo ""
        fi

        echo -e "${BLUE}----------- $host -----------${NC}"
        if [ -s "${outputs[$host]}" ]; then
            mapfile -t lines < "${outputs[$host]}"
            if [ ${#lines[@]} -gt 0 ]; then
                echo -e "${GREEN}${lines[0]} ${CYAN}#${NC}"
                printf "%s\n" "${lines[@]:1}"
            fi
        else
            echo -e "${RED}No output or connection failed${NC}"
        fi
        echo -e "${BLUE}--------------------------------------------${NC}"
        rm "${outputs[$host]}"
        first=false
    done
done
