#!/bin/bash
source config.ner || exit 1
source sources.ner || exit 1

declare -A current_dir
declare -A host_ports # Host ve port bilgilerini saklamak için

for host_port in "${HOSTS[@]}"; do
  IFS=: read host port <<< "$host_port"
  current_dir["$host"]="/root"
  host_ports["$host"]="$host:$port" # Host'a karşılık gelen host:port bilgisini sakla
done

while read -p "shell # " -er cmd; do
  [ -z "$cmd" ] && continue
  [ "$cmd" = "exit" ] && break

  if [[ "$cmd" = cd* ]]; then
    dir="${cmd#cd }"
    for host in "${!current_dir[@]}"; do
      current_dir["$host"]="$dir"
    done
    continue
  fi

  declare -A jobs
  declare -A outputs

  for host in "${!current_dir[@]}"; do
    host_port="${host_ports["$host"]}"
    IFS=: read _ port <<< "$host_port" # Port bilgisini al
    temp_file=$(mktemp)
    outputs["$host"]="$temp_file"
    # Hem hostname hem de istenen komutu tek SSH bağlantısında çalıştır
    sshpass -p "$PASSWORD" ssh -n \
      -o ConnectTimeout=3 \
      -o StrictHostKeyChecking=no \
      -p "$port" "$USER@$host" \
      "cd \"${current_dir["$host"]}\" && hostname && $cmd" > "$temp_file" 2>&1 &
    jobs["$host"]="$!"
  done

  first=true
  for host in "${!jobs[@]}"; do
    wait "${jobs["$host"]}"
    host_port="${host_ports["$host"]}"
    if ! "$first"; then
      echo ""
    fi
    echo "----------- $(echo "$host_port" | cut -d':' -f1) -----------"
    # Host bilgisini al ve yazdır
    hostname=$(cat "${outputs["$host"]}" | head -n 1)
    echo "$hostname"
    # 'hostname' satırını atlayarak asıl komutun çıktısını yazdır
    cat "${outputs["$host"]}" | tail -n +2
    echo "--------------------------------------------"
    rm "${outputs["$host"]}"
    first=false
  done
done
